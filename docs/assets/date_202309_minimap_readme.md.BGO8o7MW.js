import{_ as a,c as e,o as i,a2 as s}from"./chunks/framework.CMXJQQMW.js";const t="/assets/minimap.6uz90g-k.png",u=JSON.parse('{"title":"编辑器的缩略图实现原理","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"date/202309/minimap/readme.md","filePath":"date/202309/minimap/readme.md","lastUpdated":null}'),l={name:"date/202309/minimap/readme.md"},n=s('<h1 id="编辑器的缩略图实现原理" tabindex="-1">编辑器的缩略图实现原理 <a class="header-anchor" href="#编辑器的缩略图实现原理" aria-label="Permalink to &quot;编辑器的缩略图实现原理&quot;">​</a></h1><h2 id="一、背景" tabindex="-1">一、背景 <a class="header-anchor" href="#一、背景" aria-label="Permalink to &quot;一、背景&quot;">​</a></h2><p>部分 Web 版的 IDE 编辑器未曾实现缩略图功能，探寻一下缩略图的实现逻辑。以 VSCode 为例。</p><p>VSCode 的编辑器是<code>monaco</code>实现的，编辑器的编辑区都是采用的<code>虚拟渲染</code>，即仅渲染可视区的代码，可视区之外的动态去除 DOM 节点。</p><blockquote><p>打开 VScode &gt; Help &gt; Toggle Developer Tools，观察 DOM 节点的状态变化，可以看到是在动态变化。</p></blockquote><h2 id="二、功能特性" tabindex="-1">二、功能特性 <a class="header-anchor" href="#二、功能特性" aria-label="Permalink to &quot;二、功能特性&quot;">​</a></h2><p>参照 VSCode 的缩略图的能力，功能包括：</p><ol><li>滚动。缩略图与编辑器的滚动同步</li><li>拖拽。缩略图中的滑块拖拽功能</li><li>点击。缩略图的非滑块区域，通过点击操作定位到对应的代码位置</li></ol><p>其它的特性：</p><ol><li>代码量多的场景下，缩略图中展示的是全量代码中的部分</li><li>代码量多的场景下，滚动时，缩略图中的代码与滑块是同时在滚动的</li></ol><h2 id="三、方案设计" tabindex="-1">三、方案设计 <a class="header-anchor" href="#三、方案设计" aria-label="Permalink to &quot;三、方案设计&quot;">​</a></h2><img src="'+t+`"><p><b>假设:</b></p><ul><li>编辑器的屏高为 1，缩略图中展示的最大代码量为 N 屏的代码，代码总量为 M。</li><li>能够拿到编辑器的全量代码</li></ul><p>整体设计：</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a(缩略图滚动事件) --&gt; b[变更编辑器的垂直滚动条的 scrollTop]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c(缩略图拖拽事件) --&gt; b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  d(缩略图点击事件) --&gt; b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b --&gt; e(触发编辑器滚动条的滚动事件)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e --&gt; f(修改缩略图中滑块的定位)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e --&gt; h(修改缩略图中代码块的定位)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i(编辑器中代码变化事件) --&gt; f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i --&gt; h</span></span></code></pre></div><h3 id="一-滚动同步问题" tabindex="-1">（一） 滚动同步问题 <a class="header-anchor" href="#一-滚动同步问题" aria-label="Permalink to &quot;（一） 滚动同步问题&quot;">​</a></h3><p>主要处理两个场景：</p><ul><li>编辑器滚动事件</li><li>缩略图滚动事件</li></ul><h4 id="_1-1-编辑器滚动事件" tabindex="-1">1.1 编辑器滚动事件 <a class="header-anchor" href="#_1-1-编辑器滚动事件" aria-label="Permalink to &quot;1.1 编辑器滚动事件&quot;">​</a></h4><p>当编辑器滚动时，变更缩略图中代码块偏移位置，以及滑块位置。</p><p>具体的，缩略图中的代码块、滑块偏移距离，使用编辑器的滚动百分比进行计算。</p><p>核心思路：缩略图中滑块移动的百分比 = 缩略图中代码移动的百分比 = Ace Editor 垂直滚动条移动的百分比</p><h4 id="_1-2-缩略图滚动事件" tabindex="-1">1.2 缩略图滚动事件 <a class="header-anchor" href="#_1-2-缩略图滚动事件" aria-label="Permalink to &quot;1.2 缩略图滚动事件&quot;">​</a></h4><p>为缩略图注册<code>wheel</code>事件，当触发事件时，动态变更编辑器的滚动位置即可</p><h3 id="二-缩略图点击事件" tabindex="-1">（二）缩略图点击事件 <a class="header-anchor" href="#二-缩略图点击事件" aria-label="Permalink to &quot;（二）缩略图点击事件&quot;">​</a></h3><p>当在缩略图中触发点击事件时，假设鼠标点击位置到滑块左上角的垂直距离 为 Dy</p><p>$$ Dy = 滑块的相对偏移高度 + \\frac{滑块的相对偏移高度}{滑块可偏移高度} \\times 缩略图中代码块可偏移高度 $$</p><p>从上述的公式中，可以计算出<code>滑块的相对偏移高度</code>，然后即可得出滚动的百分比。</p><p>因为，编辑器的滚动百分比 = 缩略图滑块偏移百分比 = 缩略图代码块偏移百分比，此时设置编辑器的滚动高度即可。</p><h2 id="四、方案优化" tabindex="-1">四、方案优化 <a class="header-anchor" href="#四、方案优化" aria-label="Permalink to &quot;四、方案优化&quot;">​</a></h2><p>此时缩略中的实现是基于全量代码，渲染所有的代码，通过移动缩略图中的代码实现。</p><p>可以将代码块这部分修改为动态渲染，知道了滚动百分比，即可计算出需要渲染的开始行。在知道行高的情况下，计算出结束行。进而实现动态渲染。</p><h2 id="五、引用" tabindex="-1">五、引用 <a class="header-anchor" href="#五、引用" aria-label="Permalink to &quot;五、引用&quot;">​</a></h2><ul><li>[^1] <a href="https://ace.c9.io/"><a href="https://ace.c9.io/" target="_blank" rel="noreferrer">https://ace.c9.io/</a></a></li><li>[^2] <a href="https://github.com/ajaxorg/ace/wiki/Configuring-Ace"><a href="https://github.com/ajaxorg/ace/wiki/Configuring-Ace" target="_blank" rel="noreferrer">https://github.com/ajaxorg/ace/wiki/Configuring-Ace</a></a></li><li>[^3] <a href="https://marvinsblog.net/post/2022-04-16-web-minimap/"><a href="https://marvinsblog.net/post/2022-04-16-web-minimap/" target="_blank" rel="noreferrer">https://marvinsblog.net/post/2022-04-16-web-minimap/</a></a></li><li>[^4] <a href="https://larsjung.de/pagemap/"><a href="https://larsjung.de/pagemap/" target="_blank" rel="noreferrer">https://larsjung.de/pagemap/</a></a></li></ul>`,35),r=[n];function p(o,h,c,d,g,m){return i(),e("div",null,r)}const b=a(l,[["render",p]]);export{u as __pageData,b as default};
